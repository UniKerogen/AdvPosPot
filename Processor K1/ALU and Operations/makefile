# MakeFile to run verilog SIMULATION_FILE
# TODO: ADD DESCRIPTION!!
# TODO: ADD USER INPUT
#
####################################################
# Targets:
#	make compile
#	make run
#	make view
# 	make clean
####################################################

# TODO: ADD THINGS ABOUT IVERILOG
#
####################################################

# FILE NAMES
# change the names according to the files you have
#
tb	:= DEFAULT
vvp := simulation_result
log := simulation_output
size := NO_VALUE
num1 := NO_VALUE
num2 := NO_VALUE
contorl := NO_VALUE
####################################################

# start targets
#

# help prompt
#
help:
	@echo "\n---Regular Usage---"
	@echo "Usage: make {OPTIONS} [tb=(testbench_file)] [size=(VARIABLE_size_input)]"
	@echo "                      [num1=(first_number)] [num2=(second_number)]"
	@echo "                      [control=(control_sequence)]"
	@echo " "
	@echo "Option     Meaning"
	@echo "clean      - Remove all files generated by THIS make"
	@echo "compile    - Compile the verilog file"
	@echo "ivhelp     - iverilog help"
	@echo "mega       - Compile a single v file and view output wave"
	@echo "run        - Compile run then view the wave file"
	@echo "test       - Show test result file"
	@echo "view       - Compile run then view the wave file"
	@echo " "
	@echo "---Special Usage---"
	@echo "om [size] [num1] [num2]"
	@echo "           - Mega run on Opeartion Module Test Bench"
	@echo "alu [control] [size] [num1] [num2]"
	@echo "           - Mega run on alu_S Module Test Bench"


# check if the tb was passed
#
ifneq (${tb}, DEFAULT)

# do everything
#
mega: view
	more ${log}.log

#compile run then view wave form
#
view: run
	open /Applications/Scansion.app *.vcd

#compile the verilog file and rum vvp
#
run: compile
	vvp ${vvp}.out > ${log}.log

#compile the verilog file
#
compile:
	iverilog -o ${vvp}.out -D VAR_SIZE=${size} -D NUM1=${num1} -D NUM2=${num2} -D CONTROL=${control} ${tb}

#test the Verilog file
#
test: run
	more ${log}.log

else
mega compile run view test:
	@echo "Error: Invalid testbanch name"
	@echo "####################################################"
	@make help
endif

#########################
#om Special Case
#
om:
ifneq (${size}, NO_VALUE)
ifneq (${num1}, NO_VALUE)
ifneq (${num2}, NO_VALUE)
	@echo "Both numbers are being treated as UNSIGNED and SIGNED number."
	iverilog -o adderNU.out -D VAR_SIZE=${size} -D NUM1=${num1} -D NUM2=${num2} TestBench_OperationModule.v
	vvp adderNU.out > ${log}.log
	open /Applications/Scansion.app *.vcd
	more ${log}.log
else
	@echo "Error: No num2 value detected."
endif
else
	@echo "Error: No num1 value detected."
endif
else
	@echo "Error: No size input detected."
endif

#########################
#alu Special Case
#
alu:
ifneq (${size}, NO_VALUE)
ifneq (${control}, NO_VALUE)
ifneq (${num1}, NO_VALUE)
ifneq (${num2}, NO_VALUE)
	@echo "Both numbers are being treated as UNSIGNED and SIGNED number."
	iverilog -o alu.out -D VAR_SIZE=${size} -D CONTROL=${control} -D NUM1=${num1} -D NUM2=${num2} TestBench_alu_S.v
	vvp alu.out > ${log}.log
	#open /Applications/Scansion.app *.vcd
	more ${log}.log
else
	@echo "Error: No num2 value detected."
endif
else
	@echo "Error: No num1 value detected."
endif
else
	@echo "Error: No control input detected"
endif
else
	@echo "Error: No size input detected."
endif

#########################
# remove all result files
#
clean:
	rm *.out *.vcd *.log

#iverilog help
#
ivhelp:
	iverilog -h
